{
  description = "Nix dotfiles";

  inputs = {
    flake-utils.url = "github:numtide/flake-utils";

    # nvim {{{

    neovim = {
      url = "github:neovim/neovim?dir=contrib";
      inputs.nixpkgs.follows = "nixpkgs";
      inputs.flake-utils.follows = "flake-utils";
    };

    # }}}

    # zsh {{{

    zsh-autosuggestions = {
      url = "github:zsh-users/zsh-autosuggestions";
      flake = false;
    };

    zsh-completions = {
      url = "github:zsh-users/zsh-completions";
      flake = false;
    };

    zsh-fast-syntax-highlighting = {
      url = "github:zdharma-continuum/fast-syntax-highlighting";
      flake = false;
    };

    zsh-vi-mode = {
      url = "github:jeffreytse/zsh-vi-mode";
      flake = false;
    };

    # }}}
  };

  outputs = { self, nixpkgs, flake-utils, neovim, ... }@inputs:
    let
      starshipOverlay = final: prev: {
        starship = final.stdenv.mkDerivation {
          name = "starship";
          # TODO remove harcoded aarch64-darwin architecture
          src = builtins.fetchTarball {
            url =
              "https://github.com/starship/starship/releases/download/v1.4.2/starship-${final.stdenv.targetPlatform.config}.tar.gz";
            sha256 = let
              shas."aarch64-apple-darwin" =
                "1zx7svzj4w43q82rj75z6n8v873gz4jlh5csi23swwaragr37nxi";
              shas."aarch64-unknown-linux-musl" =
                "15k4cwpjrs353v1gksh21jyn5wwadzvwxh3cjb2ry79a8gzjmckr";
              shas."x86_64-apple-darwin" =
                "0qc1cg9adgsszmz9brsj2vv004ki4jygv1hv8ffnk52dq65b7n7z";
              shas."x86_64-unknown-linux-gnu" =
                "1sim4q4x9liaf88xp86cibk0fyyaa27issqkq404z44kxljrgyi0";
              shas."x86_64-unknown-linux-musl" =
                "14l8rfqprjmshg6vi60pbbyyi09jrcb0m1cr5w5ngzxwssf7bnz4";
            in shas.${final.stdenv.targetPlatform.config};
          };
          phases = [ "installPhase" "patchPhase" ];
          installPhase = ''
            mkdir -p $out/bin
            cp $src $out/bin/starship
            chmod +x $out/bin/starship
          '';
        };
      };
    in flake-utils.lib.eachDefaultSystem (system:
      let
        pkgs = import nixpkgs {
          inherit system;
          overlays = [ starshipOverlay ];
        };
      in {
        packages.home = pkgs.buildEnv {
          name = "home";
          paths = [
            (pkgs.symlinkJoin {
              name = "nvim";
              paths = with pkgs; [
                neovim.packages.${system}.neovim
                gcc # for installing treesitter parsers
                ripgrep # for telescope
                github-cli # for octo.nvim
              ];
            })

            # zsh
            (pkgs.writeTextFile {
              name = "zsh-config";
              destination = "/dots/.zshrc";
              text = ''
                # Generated by Nix {{{

                # Prompt
                starship="${pkgs.starship}/bin/starship"

                # Binaries
                rmtrash="${pkgs.rmtrash}/bin/rmtrash"
                rmdirtrash="${pkgs.rmtrash}/bin/rmdirtrash"

                # Plugins
                autosuggestions="${inputs.zsh-autosuggestions}"
                completions="${inputs.zsh-completions}"
                fast_syntax_highlighting="${inputs.zsh-fast-syntax-highlighting}"
                vi_mode="${inputs.zsh-vi-mode}"

                # }}}

                ${builtins.readFile ./configs/zsh/zshrc.zsh}
              '';
            })
            (pkgs.writeTextFile {
              name = "starship-config";
              destination = "/dots/.config/starship.toml";
              text = builtins.readFile ./configs/zsh/starship.toml;
            })

            # nvim
            (pkgs.writeTextFile {
              name = "init.lua";
              destination = "/dots/.config/nvim/init.lua";
              text = ''
                -- Generated by Nix {{{

                vim.cmd("set packpath+=${
                  pkgs.vimUtils.packDir {
                    packer = { start = [ pkgs.vimPlugins.packer-nvim ]; };
                  }
                }")

                -- }}}

                ${builtins.readFile ./configs/nvim/init.lua}
              '';
            })
            (pkgs.runCommand "nvim-plugins-config" { } ''
              src="$out/dots/.config/nvim/lua/plugins"}
              mkdir -p $src && ln -sf ${./configs/nvim/lua/plugins} $src
            '')
          ];
          pathsToLink = [ "/bin" "/dots" ];
        };
        packages.setup = pkgs.writeShellScriptBin "setup"
          (builtins.concatStringsSep "\n" (builtins.map
            (dot: "mkdir -p $(dirname $HOME/${dot}) && ln -fs $HOME/.nix-profile/dots/${dot} $HOME/${dot}")
            (let homeDots = "${self.packages.${system}.home}/dots";
            in builtins.map (pkgs.lib.removePrefix "${homeDots}/")
            (pkgs.lib.filesystem.listFilesRecursive homeDots))));
      });
}
